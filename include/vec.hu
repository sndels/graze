#ifndef GRAZE_VEC_HU
#define GRAZE_VEC_HU

#include <curand_kernel.h>

struct Vec3 {
    // Alias both xyz and rgb components
    union { float x, r; };
    union { float y, g; };
    union { float z, b; };

    __host__ __device__ Vec3()
    {
        x = 0.f;
        y = 0.f;
        z = 0.f;
    }

    __host__ __device__ Vec3(const float t) :
        x{t},
        y{t},
        z{t}
    { }

    __host__ __device__ Vec3(const float x, const float y, const float z) :
        x{x},
        y{y},
        z{z}
    { }

    __host__ __device__ const Vec3& operator+();
    __host__ __device__ Vec3 operator-() const;

    __host__ __device__ Vec3& operator+=(const Vec3& other);
    __host__ __device__ Vec3& operator-=(const Vec3& other);
    __host__ __device__ Vec3& operator*=(const Vec3& other);
    __host__ __device__ Vec3& operator/=(const Vec3& other);
    __host__ __device__ Vec3& operator+=(const float t);
    __host__ __device__ Vec3& operator-=(const float t);
    __host__ __device__ Vec3& operator*=(const float t);
    __host__ __device__ Vec3& operator/=(const float t);
};

inline const Vec3& Vec3::operator+()
{
    return *this;
}

inline Vec3 Vec3::operator-() const
{
    return Vec3{-x, -y, -z};
}

inline Vec3& Vec3::operator+=(const Vec3& other)
{
    x += other.x;
    y += other.y;
    z += other.z;
    return *this;
}

inline Vec3& Vec3::operator-=(const Vec3& other)
{
    x -= other.x;
    y -= other.y;
    z -= other.z;
    return *this;
}

inline Vec3& Vec3::operator*=(const Vec3& other)
{
    x *= other.x;
    y *= other.y;
    z *= other.z;
    return *this;
}

inline Vec3& Vec3::operator/=(const Vec3& other)
{
    x /= other.x;
    y /= other.y;
    z /= other.z;
    return *this;
}

inline Vec3& Vec3::operator+=(const float t)
{
    x += t;
    y += t;
    z += t;
    return *this;
}

inline Vec3& Vec3::operator-=(const float t)
{
    x -= t;
    y -= t;
    z -= t;
    return *this;
}

inline Vec3& Vec3::operator*=(const float t)
{
    x *= t;
    y *= t;
    z *= t;
    return *this;
}

inline Vec3& Vec3::operator/=(const float t)
{
    x /= t;
    y /= t;
    z /= t;
    return *this;
}

__host__ __device__ inline Vec3 cross(const Vec3& v0, const Vec3& v1)
{
    return Vec3{
        v0.y * v1.z - v0.z * v1.y,
        v0.z * v1.x - v0.x * v1.z,
        v0.x * v1.y - v0.y * v1.x
    };
}

__host__ __device__ inline Vec3 operator+(const Vec3& v0, const Vec3& v1)
{
    return Vec3{v0.x + v1.x, v0.y + v1.y, v0.z + v1.z};
}

__host__ __device__ inline Vec3 operator-(const Vec3& v0, const Vec3& v1)
{
    return Vec3{v0.x - v1.x, v0.y - v1.y, v0.z - v1.z};
}

__host__ __device__ inline Vec3 operator*(const Vec3& v0, const Vec3& v1)
{
    return Vec3{v0.x * v1.x, v0.y * v1.y, v0.z * v1.z};
}

__host__ __device__ inline Vec3 operator/(const Vec3& v0, const Vec3& v1)
{
    return Vec3{v0.x / v1.x, v0.y / v1.y, v0.z / v1.z};
}

__host__ __device__ inline Vec3 operator+(const Vec3& v, const float t)
{
    return Vec3{v.x + t, v.y + t, v.z + t};
}

__host__ __device__ inline Vec3 operator-(const Vec3& v, const float t)
{
    return Vec3{v.x - t, v.y - t, v.z - t};
}

__host__ __device__ inline Vec3 operator*(const Vec3& v, const float t)
{
    return Vec3{v.x * t, v.y * t, v.z * t};
}

__host__ __device__ inline Vec3 operator/(const Vec3& v, const float t)
{
    return Vec3{v.x / t, v.y / t, v.z / t};
}

__host__ __device__ inline Vec3 operator+(const float t, const Vec3& v)
{
    return v + t;
}

__host__ __device__ inline Vec3 operator-(const float t, const Vec3& v)
{
    return -v + t;
}

__host__ __device__ inline Vec3 operator*(const float t, const Vec3& v)
{
    return v * t;
}

__host__ __device__ inline Vec3 operator/(const float t, const Vec3& v)
{
    return Vec3{
        t / v.x,
        t / v.y,
        t / v.z
    };
}

__host__ __device__ inline float dot(const Vec3& v0, const Vec3& v1)
{
    return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z;
}

__host__ __device__ inline float lenSq(const Vec3& v)
{
    return dot(v, v);
}

__host__ __device__ inline float len(const Vec3& v)
{
    return sqrt(lenSq(v));
}

__host__ __device__ inline Vec3 normalize(const Vec3& v)
{
    return v / len(v);
}

// l is the incoming direction
// n is the normal of the surface
__host__ __device__ inline Vec3 reflect (const Vec3& l, const Vec3& n)
{
    return l - 2.f * dot(n, l) * n;
}

// l is the incoming direction
// n is the normal on the incoming side
// ni, nt are the incoming and outgoing indices of refraction, respectively
__host__ __device__ inline bool refract(const Vec3& l, const Vec3& n, const float ni, const float nt, Vec3* refracted)
{
    // https://en.wikipedia.org/wiki/Snell's_law#Vector_form
    const float c = -dot(n, l);
    const float r = ni / nt;
    const float d = 1.f - r * r * (1.f - c * c);

    // Check if total internal reflection happens
    if (d < 0.f)
        return false;

    *refracted = r * l + (r * c - sqrt(d)) * n;
    return true;
}

__host__ __device__ inline Vec3 pow(const Vec3& v, const float e)
{
    return Vec3{pow(v.x, e), pow(v.y, e), pow(v.z, e)};
}

__device__ inline Vec3 randomDir(curandStatePhilox4_32_10_t* randState)
{
    Vec3 v;
    do {
        v = Vec3{
                curand_uniform(randState),
                curand_uniform(randState),
                curand_uniform(randState)
            } * 2.f - 1.f;
    } while (len(v) > 1.f);
    return v;
}

// https://devblogs.nvidia.com/lerp-faster-cuda/
__device__ inline Vec3 lerp(const Vec3& v0, const Vec3& v1, float t) {
    return Vec3{
        fma(t, v1.x, fma(-t, v0.x, v0.x)),
        fma(t, v1.y, fma(-t, v0.y, v0.y)),
        fma(t, v1.z, fma(-t, v0.z, v0.z))
    };
}

#endif // GRAZE_VEC_HU
