#ifndef GRAZE_MATERIAL_HU
#define GRAZE_MATERIAL_HU

#include "intersectable.hu"
#include "ray.hu"
#include "texture.hu"

class Material {
public:
    __device__ virtual bool scatter(const Ray& r, const Hit& hit, Vec3* attenuation, Ray* scattered, curandStatePhilox4_32_10_t* randState) const = 0;
};

class Lambertian : public Material {
public:
    __device__ Lambertian(Texture* albedo);
    __device__ ~Lambertian();

    __device__ virtual bool scatter(const Ray& r, const Hit& hit, Vec3* attenuation, Ray* scattered, curandStatePhilox4_32_10_t* randState) const;

private:
    Texture* _albedo;
};

class Metal : public Material {
public:
    __device__ Metal(const Vec3& albedo, const float roughness);

    __device__ virtual bool scatter(const Ray& r, const Hit& hit, Vec3* attenuation, Ray* scattered, curandStatePhilox4_32_10_t* randState) const;

private:
    Vec3 _albedo;
    float _roughness;
};

class Dielectric : public Material {
public:
    __device__ Dielectric(const float refIdx);

    __device__ virtual bool scatter(const Ray& r, const Hit& hit, Vec3* attenuation, Ray* scattered, curandStatePhilox4_32_10_t* randState) const;

private:
    float _refIdx;
};

#endif // GRAZE_MATERIAL_HU
